name "profundimetro"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "profundimetroTypes.hpp"
# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "profundimetro"
# import_types_from "profundimetro/CustomType.hpp"

using_library "raw_io"
import_types_from "raw_io/raw_io.hpp"

import_types_from "iodrivers_base"
import_types_from "base"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
# import_types_from "base"

# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the profundimetro namespace.
task_context "Task" do
    needs_configuration

    property "config_value", "/std/string", ""

    input_port "inputRaw", "/iodrivers_base/RawPacket"


    output_port "outputRaw", "/iodrivers_base/RawPacket"
    output_port "send485", "/raw_io/Digital"
    output_port "depth", "double"

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    port_driven "inputRaw"
    # By default, the task will be periodic with a period of 0.1
    # periodic 0.1
end

